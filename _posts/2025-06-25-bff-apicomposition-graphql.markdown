---
layout: post
title:  "聊聊API聚合：BFF、GraphQL和API Composition的选择之道"
date:   2025-06-25 08:22:11 +0000
categories: architecture api
---

最近在做架构设计时，经常遇到一个问题：前端需要调用多个后端服务来完成一个业务流程，这时候就涉及到API聚合的选择。今天想跟大家分享一下我对BFF、GraphQL和API Composition这三种主流方案的理解和思考。

## 🔍 先说说这三个概念

在深入讨论之前，我觉得有必要先理清楚这三个概念：

### BFF (Backend for Frontend) - 命令式聚合
简单来说，就是为不同的前端（Web、移动端、小程序等）各自创建一个专用的后端服务。这个后端负责调用多个下游API，然后按照前端的需求来处理和合并数据。

### GraphQL - 声明式聚合  
GraphQL提供了一个统一的查询层，前端可以通过一个请求声明自己需要什么数据，后端从多个数据源获取并组装返回。最大的特点是前端可以精确控制获取的数据结构。

### API Composition - 配置式聚合
主要通过API网关（Kong、Nginx、Krakend等）的配置来实现聚合，基本不需要写业务代码，主要用于路由转发和简单的数据转换。

## 🤔 什么时候需要API聚合？

根据我的经验，以下几种情况比较适合考虑API聚合：

### ✅ 推荐使用的场景

**客户端调用太复杂了**  
如果你发现前端为了完成一个功能需要调用好几个API，而且还要处理各种异常情况，那聚合就很有价值了。

**串行调用链路太长**  
有些业务需要先调用A接口，拿到结果后再调用B接口，然后再调用C接口...这种情况下，服务端聚合可以大大减少网络往返次数。

**不同端的需求差异很大**  
移动端可能只需要部分字段，Web端需要完整数据，小程序又有自己的特殊需求。这时候BFF或GraphQL就很有用。

**想提升用户体验**  
减少请求次数意味着更快的页面加载速度，特别是在网络条件不好的情况下。

### ⚠️ 需要谨慎的场景

**有慢接口的情况**  
如果聚合的接口中有响应很慢的，会拖累整体响应时间。这时候需要考虑异步处理或者缓存策略。

**过度设计**  
如果现有的API已经能很好地满足需求，就不要为了聚合而聚合。

**团队技术栈不匹配**  
比如团队对GraphQL不熟悉，强行上GraphQL可能得不偿失。

## 📊 三种方案的对比

我做了一个对比表格，帮大家更好地理解：

| 特性 | BFF | GraphQL | API Composition |
|------|-----|---------|-----------------|
| **实现方式** | 手写代码 | Schema + Resolver | 配置文件 |
| **灵活性** | 🟢 非常高 | 🟡 高 | 🔴 受配置限制 |
| **开发成本** | 🔴 高 | 🟡 中等 | 🟢 低 |
| **维护成本** | 🔴 高 | 🟡 中等 | 🟢 低 |
| **性能** | 🟡 看实现 | 🟡 看优化 | 🟢 通常较好 |
| **学习曲线** | 🟡 中等 | 🔴 陡峭 | 🟢 平缓 |

### 📝 详细分析

**BFF的特点**
- **优势**：完全可控，可以实现任何复杂的业务逻辑
- **劣势**：需要维护多个服务，开发和运维成本较高
- **适合**：多端差异化需求明显，需要复杂业务处理的场景

**GraphQL的特点**  
- **优势**：前端可以精确获取所需数据，避免over-fetching和under-fetching
- **劣势**：学习成本高，缓存策略复杂，N+1查询问题需要注意
- **适合**：数据结构变化频繁，前端迭代快速的场景

**API Composition的特点**
- **优势**：配置简单，性能好，维护成本低
- **劣势**：灵活性有限，难以处理复杂业务逻辑
- **适合**：简单的数据聚合和转换场景

## 🎯 我的选择建议

基于这几年的实践经验，我的建议是：

### 1️⃣ 优先考虑API Composition
如果你的聚合需求比较简单，主要是数据转换和路由，那就选API Composition。配置简单，性能好，维护成本低。

**推荐工具**：Krakend、Kong、Nginx Plus

### 2️⃣ 数据需求复杂选GraphQL
如果前端数据需求变化频繁，不同页面需要不同的数据结构，GraphQL是个不错的选择。

**注意事项**：
- 做好Schema设计
- 解决N+1查询问题
- 考虑好缓存策略
- 权限控制要到位

### 3️⃣ 复杂业务逻辑选BFF
如果需要复杂的业务处理、状态管理，或者不同端的差异化需求很大，那就选BFF。

**建议**：
- 每个BFF保持轻量，避免重复造轮子
- 做好服务治理和监控
- 考虑使用微服务框架

## 💭 一些思考

### 是否需要框架级支持？

我觉得对于大部分项目来说，并不需要一开始就引入复杂的聚合框架。可以按照这个优先级来考虑：

1. **先优化API设计**：看看能否通过改进现有API来解决问题
2. **考虑简单聚合**：使用API网关的配置式聚合
3. **引入GraphQL**：数据需求复杂且变化频繁时
4. **开发BFF**：有复杂业务逻辑需求时

### 需要注意的坑

**过度聚合**  
不要为了聚合而聚合，增加系统复杂度而收益不明显。

**维护成本**  
聚合层也需要维护，Schema、配置文件、BFF代码都需要人力投入。

**性能问题**  
聚合可能会引入新的性能瓶颈，需要做好监控和优化。

## 🚀 总结

API聚合没有银弹，需要根据具体场景来选择：

- **简单聚合** → API Composition
- **灵活数据需求** → GraphQL  
- **复杂业务逻辑** → BFF

最重要的是理解每种方案的适用场景和权衡点，不要盲目追求新技术。从简单开始，根据业务发展逐步演进，才是明智的选择。

希望这篇文章对大家有帮助！如果你有不同的看法或者实践经验，欢迎在评论区交流讨论。

---

*本文基于个人实践经验总结，如有不当之处，欢迎指正。*